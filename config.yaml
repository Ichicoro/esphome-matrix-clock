esphome:
  name: cool-matrix-clock

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source: github://TillFleisch/ESPHome-HUB75-MatrixDisplayWrapper@main

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - id: my_ota
    platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # output_power: 10.0dBm

time:
  - platform: sntp
    id: sntp_time
    on_time: 
      - cron: "0 0 * * * *"
        then:
          - rtttl.play: 'two_short:d=4,o=5,b=125:16b5,8p,16b5'

font:
  # - file: "fonts/7x14B.bdf"
  #   id: big_font
  #   size: 14
  #   bpp: 2
  - file: "fonts/MatrixChunky6.bdf"
    id: small_font
    size: 6
    bpp: 2
  # - file: "fonts/spleen-5x8.bdf"
  #   id: small_font
  #   size: 8
  #   bpp: 2
  - file: "fonts/MatrixChunky8.bdf"
    id: big_font
    size: 8
    bpp: 1

image:
  - file: "icons/smile.png"
    id: smile_icon
    type: BINARY
    use_transparency: True
  - file: "icons/iphone.png"
    id: iphone_icon
    type: BINARY
    use_transparency: True

sensor:
  - platform: homeassistant
    entity_id: weather.home_weather
    id: weather
    name: "Weather"
    attribute: temperature
  - platform: homeassistant
    entity_id: sensor.iphone_di_zelda_battery_level
    id: iphone_battery
    name: "iPhone Battery"

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO21
      inverted: true
    name: "Button1"
    on_press:
      then:
        - output.turn_on: buzzer
        - output.ledc.set_frequency:
            id: buzzer
            frequency: "1000Hz"
        - output.set_level:
            id: buzzer
            level: "50%"
    on_release: 
      then:
        - output.turn_off: buzzer
  - platform: gpio
    pin:
      number: GPIO33
      inverted: true
    name: "Button2"
    on_press: 
      then:
        - rtttl.play: 'two_short:d=4,o=5,b=125:16b5,8p,16b5'
  - platform: gpio
    pin:
      number: GPIO32
      inverted: true
    name: "Button3"
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "Button4"
    on_press:
      then:
        - output.turn_on: buzzer
        - output.ledc.set_frequency:
            id: buzzer
            frequency: "1000Hz"
        - output.set_level:
            id: buzzer
            level: "50%"
    on_release: 
      then:
        - output.turn_off: buzzer
  - platform: gpio
    pin:
      number: GPIO34
      inverted: true
    name: "Button5"
    on_press:
      then:
        - output.turn_on: buzzer
        - output.ledc.set_frequency:
            id: buzzer
            frequency: "1000Hz"
        - output.set_level:
            id: buzzer
            level: "50%"
    on_release: 
      then:
        - output.turn_off: buzzer
  
button:
  - platform: template
    name: "Play doorbell"
    id: doorbell_snd_button
    on_press:
      then:
        - rtttl.play: 'doorbell:d=4,o=5,b=160:c#,f,g#,c#6'
  - platform: template
    name: "Play casio beep beep"
    id: casio_beep_beep_snd_button
    on_press:
      then:
        - rtttl.play: 'two_short:d=4,o=5,b=125:16b5,8p,16b5'

display:
  - platform: hub75_matrix_display
    id: matrix
    width: 64
    height: 32
    R1_pin: GPIO25
    B1_pin: GPIO26
    G1_pin: GPIO27
    R2_pin: GPIO14
    B2_pin: GPIO12
    G2_pin: GPIO13
    A_pin: GPIO23
    B_pin: GPIO19
    C_pin: GPIO5
    D_pin: GPIO17
    E_pin: GPIO22
    LAT_pin: GPIO4
    OE_pin: GPIO15
    CLK_pin: GPIO16
    driver: ICN2038S
    brightness: 255
    i2sspeed: HZ_20M
    rotation: 180
    pages:
      - id: clock_page
        lambda: |-
          auto time = id(sntp_time).now();
          auto orange = Color(255, 100, 30);
          auto darkerOrange = Color(255, 50, 15);

          const char *days[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
          auto day = days[time.day_of_week - 1];

          float temperature = id(weather).state;

          it.printf(1, 1, id(big_font), orange, "%02d:%02d:%02d", time.hour, time.minute, time.second);
          it.printf(1, 11, id(small_font), orange, "%s %02d-%02d-%04d", day, time.day_of_month, time.month, time.year);

          it.printf(64, 1, id(big_font), orange, TextAlign::TOP_RIGHT, "%.0fÂ°C", temperature);

          bool showFirstSmile = false;

          if (showFirstSmile) {
            auto shouldBeUp1 = (time.second + 1) % 4 >= 2;
            it.image(1, 22 - shouldBeUp1, id(smile_icon), orange);
          }
          auto shouldBeUp2 = time.second % 4 >= 2;
          it.image(54, 21 + shouldBeUp2, id(smile_icon), orange);

          showFirstSmile = false;

          uint battery = id(iphone_battery).state;
          it.image(12 + (showFirstSmile ? 0 : -11), 25, id(iphone_icon), orange, darkerOrange);
          it.printf(18 + (showFirstSmile ? 0 : -11), 26, id(small_font), orange, "%d%%", battery);

output:
  - platform: ledc
    pin: GPIO18
    id: buzzer

rtttl:
  output: buzzer
  id: my_rtttl
  gain: 50%